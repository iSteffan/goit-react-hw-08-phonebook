{"version":3,"file":"static/js/654.d2efa74e.chunk.js","mappings":"iPAOaA,GAAoBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,gGAOjBE,GAAuBF,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iGAOpBG,GAAOH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,0YAsBJK,GAAQL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,4M,wKChBZO,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,mBACrCC,SAAUJ,EAAAA,KAAYG,SAAS,qBAyGjC,EAtGc,WACZ,IAAME,GAAWC,EAAAA,EAAAA,MAGjB,GAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,EAAc,kBAAMD,GAASD,EAAf,EAEpB,OACE,SAAC,KAAD,CACEG,cAAe,CAAET,MAAO,GAAIE,SAAU,IACtCQ,iBAAkBb,EAClBc,SAAU,SAACC,EAAQC,GACjBV,GACEW,EAAAA,EAAAA,IAAM,CACJd,MAAOY,EAAOZ,MACdE,SAAUU,EAAOV,YAIrBW,EAAQE,WACT,EAZH,SAcG,SAAAC,GACC,IAAMC,GAAgBD,EAAMJ,OAAOZ,OAASgB,EAAME,QAAQlB,MACpDmB,GACHH,EAAMJ,OAAOV,UAAYc,EAAME,QAAQhB,SAE1C,OACE,UAACT,EAAD,YACE,SAACE,EAAD,CAAOyB,KAAK,QAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,YAAU,EAACC,UAAWN,EAAcO,GAAI,EAArD,WACE,SAAC,IAAD,qBACA,UAAC,IAAD,YACE,SAAC,EAAAC,GAAD,kBACMJ,GADN,IAEEK,QAAQ,UACRC,YAAY,kBAEd,SAAC,IAAD,CAAkBC,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAIC,EAAAA,IAAeC,MAAM,oBAVtC,KAgBH,SAAC1C,EAAD,CAAmB+B,KAAK,QAAQY,UAAU,SAC1C,SAACrC,EAAD,CAAOyB,KAAK,WAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,YAAU,EAACC,UAAWJ,EAAnC,WACE,SAAC,IAAD,wBACA,UAAC,IAAD,CAAYc,KAAK,KAAjB,WACE,SAAC,EAAAR,GAAD,kBACMJ,GADN,IAEEa,GAAG,SACHC,KAAM7B,EAAO,OAAS,WACtBoB,QAAQ,UACRC,YAAY,qBAEd,SAAC,IAAD,CAAkBC,cAAc,OAAhC,UACE,SAAC,IAAD,CAAMC,GAAIO,EAAAA,IAASL,MAAM,gBAE3B,SAAC,IAAD,CAAmBM,MAAM,SAAzB,SACG/B,GACC,SAAC,IAAD,CACEgC,EAAE,UACFL,KAAK,KACLP,QAAQ,QACRa,MAAM,SAAC,MAAD,IACNC,QAAShC,KAGX,SAAC,IAAD,CACE8B,EAAE,UACFL,KAAK,KACLP,QAAQ,QACRa,MAAM,SAAC,MAAD,IACNC,QAAShC,WA7BpB,KAqCH,SAAChB,EAAD,CAAsB4B,KAAK,WAAWY,UAAU,SAChD,SAAC,IAAD,CACES,UAAU,SAAC,MAAD,IACVC,GAAI,EACJC,YAAY,OACZC,UAAW5B,EAAM6B,aACjBV,KAAK,SALP,sBAWL,GAGN,C","sources":["pages/Login.styled.js","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessageEmail = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 90px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const ErrorMessagePassword = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 184px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n  margin-top: 65px;\n  margin-left: auto;\n  margin-right: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 12px;\n  min-width: 320px;\n\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n  /* margin-top: 10px; */\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n  width: 100%;\n  /* height: 40px; */\n  border-radius: 12px;\n`;\n","import {\n  Form,\n  Field,\n  ErrorMessageEmail,\n  ErrorMessagePassword,\n} from './Login.styled';\nimport { logIn } from '../redux/auth/authOperations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport {\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  FormControl,\n  FormLabel,\n  IconButton,\n  Icon,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { SlLogin } from 'react-icons/sl';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport { TfiLock } from 'react-icons/tfi';\nimport { AiOutlineMail } from 'react-icons/ai';\n\nconst FormSchema = Yup.object().shape({\n  email: Yup.string().email().required('Required field!'),\n  password: Yup.mixed().required('Required field!'),\n});\n\nconst Login = () => {\n  const dispatch = useDispatch();\n\n  // Відображення паролю\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={FormSchema}\n      onSubmit={(values, actions) => {\n        dispatch(\n          logIn({\n            email: values.email,\n            password: values.password,\n          })\n        );\n\n        actions.resetForm();\n      }}\n    >\n      {props => {\n        const isErrorEmail = !props.values.email && props.touched.email;\n        const isErrorPassword =\n          !props.values.password && props.touched.password;\n\n        return (\n          <Form>\n            <Field name=\"email\">\n              {({ field }) => (\n                <FormControl isRequired isInvalid={isErrorEmail} mb={3}>\n                  <FormLabel>Email</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      variant=\"flushed\"\n                      placeholder=\"Enter email\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={AiOutlineMail} color=\"grey.800\" />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessageEmail name=\"email\" component=\"div\" />\n            <Field name=\"password\">\n              {({ field }) => (\n                <FormControl isRequired isInvalid={isErrorPassword}>\n                  <FormLabel>Password</FormLabel>\n                  <InputGroup size=\"md\">\n                    <Input\n                      {...field}\n                      pr=\"4.5rem\"\n                      type={show ? 'text' : 'password'}\n                      variant=\"flushed\"\n                      placeholder=\"Enter password\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={TfiLock} color=\"grey.800\" />\n                    </InputLeftElement>\n                    <InputRightElement width=\"4.5rem\">\n                      {show ? (\n                        <IconButton\n                          h=\"1.75rem\"\n                          size=\"lg\"\n                          variant=\"ghost\"\n                          icon={<BiShow />}\n                          onClick={handleClick}\n                        ></IconButton>\n                      ) : (\n                        <IconButton\n                          h=\"1.75rem\"\n                          size=\"lg\"\n                          variant=\"ghost\"\n                          icon={<BiHide />}\n                          onClick={handleClick}\n                        ></IconButton>\n                      )}\n                    </InputRightElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessagePassword name=\"password\" component=\"div\" />\n            <Button\n              leftIcon={<SlLogin />}\n              mt={4}\n              colorScheme=\"blue\"\n              isLoading={props.isSubmitting}\n              type=\"submit\"\n            >\n              Log in\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Login;\n"],"names":["ErrorMessageEmail","styled","FormikErrorMessage","ErrorMessagePassword","Form","FormikForm","Field","FormikInput","FormSchema","Yup","shape","email","required","password","dispatch","useDispatch","useState","show","setShow","handleClick","initialValues","validationSchema","onSubmit","values","actions","logIn","resetForm","props","isErrorEmail","touched","isErrorPassword","name","field","isRequired","isInvalid","mb","I","variant","placeholder","pointerEvents","as","AiOutlineMail","color","component","size","pr","type","TfiLock","width","h","icon","onClick","leftIcon","mt","colorScheme","isLoading","isSubmitting"],"sourceRoot":""}