{"version":3,"file":"static/js/38.26e8f1ea.chunk.js","mappings":"oUAqBMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,mBACrCC,SAAUJ,EAAAA,KAAYG,SAAS,qBA4GjC,UAzGc,WACZ,IAAME,GAAWC,EAAAA,EAAAA,MAGjB,GAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,EAAc,kBAAMD,GAASD,EAAf,EAEpB,OACE,SAAC,KAAD,CACEG,cAAe,CAAET,MAAO,GAAIE,SAAU,IACtCQ,iBAAkBb,EAClBc,SAAU,SAACC,EAAQC,GACjBC,QAAQC,IAAIH,GACZT,GACEa,EAAAA,EAAAA,IAAM,CACJhB,MAAOY,EAAOZ,MACdE,SAAUU,EAAOV,YAIrBW,EAAQI,WACT,EAbH,SAeG,SAAAC,GACC,IAAMC,GAAgBD,EAAMN,OAAOZ,OAASkB,EAAME,QAAQpB,MACpDqB,GACHH,EAAMN,OAAOV,UAAYgB,EAAME,QAAQlB,SAE1C,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOoB,KAAK,QAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,YAAU,EAACC,UAAWN,EAAnC,WACE,SAAC,IAAD,qBACA,SAAC,EAAAO,GAAD,kBACMH,GADN,IAEEI,QAAQ,UACRC,YAAY,mBANjB,KAkBH,SAAC,KAAD,CAAcN,KAAK,QAAQO,UAAU,SACrC,SAAC,KAAD,CAAOP,KAAK,WAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaC,YAAU,EAACC,UAAWJ,EAAnC,WACE,SAAC,IAAD,wBACA,UAAC,IAAD,CAAYS,KAAK,KAAjB,WACE,SAAC,EAAAJ,GAAD,kBACMH,GADN,IAEEQ,GAAG,SACHC,KAAM1B,EAAO,OAAS,WACtBqB,QAAQ,UACRC,YAAY,qBAEd,SAAC,IAAD,CAAmBK,MAAM,SAAzB,SACG3B,GACC,SAAC,IAAD,CACE4B,EAAE,UACFJ,KAAK,KACLH,QAAQ,QACRQ,MAAM,SAAC,MAAD,IACNC,QAAS5B,KAGX,SAAC,IAAD,CACE0B,EAAE,UACFJ,KAAK,KACLH,QAAQ,QACRQ,MAAM,SAAC,MAAD,IACNC,QAAS5B,WA1BpB,KAqCH,SAAC,KAAD,CAAcc,KAAK,WAAWO,UAAU,SACxC,SAAC,IAAD,CACEQ,UAAU,SAAC,MAAD,IACVC,GAAI,EACJC,YAAY,OACZC,UAAWtB,EAAMuB,aACjBT,KAAK,SALP,sBAWL,GAGN,C,mMC1HYU,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4CAIZE,GAAOF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,oXAqBJI,EAAQJ,EAAAA,GAAAA,MAAH,6DAKLK,GAAQL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,sMAWLO,EAAMP,EAAAA,GAAAA,OAAH,sO","sources":["pages/Login.jsx","pages/Register.styled.js"],"sourcesContent":["// import { Form, Label, Btn, Field, ErrorMessage } from './Register.styled';\nimport { Form, Field, ErrorMessage } from './Register.styled';\nimport { logIn } from '../redux/auth/authOperations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport {\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  FormControl,\n  FormLabel,\n  IconButton,\n  // FormErrorMessage,\n  // FormHelperText,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { SlLogin } from 'react-icons/sl';\nimport { BiShow, BiHide } from 'react-icons/bi';\n\nconst FormSchema = Yup.object().shape({\n  email: Yup.string().email().required('Required field!'),\n  password: Yup.mixed().required('Required field!'),\n});\n\nconst Login = () => {\n  const dispatch = useDispatch();\n\n  // Відображення паролю\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={FormSchema}\n      onSubmit={(values, actions) => {\n        console.log(values);\n        dispatch(\n          logIn({\n            email: values.email,\n            password: values.password,\n          })\n        );\n\n        actions.resetForm();\n      }}\n    >\n      {props => {\n        const isErrorEmail = !props.values.email && props.touched.email;\n        const isErrorPassword =\n          !props.values.password && props.touched.password;\n\n        return (\n          <Form>\n            <Field name=\"email\">\n              {({ field }) => (\n                <FormControl isRequired isInvalid={isErrorEmail}>\n                  <FormLabel>Email</FormLabel>\n                  <Input\n                    {...field}\n                    variant=\"flushed\"\n                    placeholder=\"Enter email\"\n                  />\n                  {/* {!isError ? (\n                    <FormHelperText>\n                      We'll never share your email.\n                    </FormHelperText>\n                  ) : (\n                    <FormErrorMessage>Email is required.</FormErrorMessage>\n                  )} */}\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"email\" component=\"div\" />\n            <Field name=\"password\">\n              {({ field }) => (\n                <FormControl isRequired isInvalid={isErrorPassword}>\n                  <FormLabel>Password</FormLabel>\n                  <InputGroup size=\"md\">\n                    <Input\n                      {...field}\n                      pr=\"4.5rem\"\n                      type={show ? 'text' : 'password'}\n                      variant=\"flushed\"\n                      placeholder=\"Enter password\"\n                    />\n                    <InputRightElement width=\"4.5rem\">\n                      {show ? (\n                        <IconButton\n                          h=\"1.75rem\"\n                          size=\"lg\"\n                          variant=\"ghost\"\n                          icon={<BiShow />}\n                          onClick={handleClick}\n                        ></IconButton>\n                      ) : (\n                        <IconButton\n                          h=\"1.75rem\"\n                          size=\"lg\"\n                          variant=\"ghost\"\n                          icon={<BiHide />}\n                          onClick={handleClick}\n                        ></IconButton>\n                      )}\n                      {/* <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                        {show ? 'Hide' : 'Show'}\n                      </Button> */}\n                    </InputRightElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessage name=\"password\" component=\"div\" />\n            <Button\n              leftIcon={<SlLogin />}\n              mt={4}\n              colorScheme=\"blue\"\n              isLoading={props.isSubmitting}\n              type=\"submit\"\n            >\n              Log in\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Login;\n//     <Formik\n//       initialValues={{\n//         email: '',\n//         password: '',\n//       }}\n//       validationSchema={FormSchema}\n//       onSubmit={(values, actions) => {\n//         console.log(values);\n//         dispatch(\n//           logIn({\n//             email: values.email,\n//             password: values.password,\n//           })\n//         );\n//         actions.resetForm();\n//       }}\n//     >\n//       <Form>\n//         <Label>\n//           Email\n//           <br />\n//           <Field type=\"email\" name=\"email\" />\n//           <ErrorMessage name=\"email\" component=\"div\" />\n//         </Label>\n//         <Label>\n//           Password\n//           <br />\n//           <Field name=\"password\" />\n//           <ErrorMessage name=\"password\" component=\"div\" />\n//         </Label>\n//         <Btn type=\"submit\">Log in</Btn>\n//       </Form>\n//     </Formik>;\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n`;\n\nexport const Form = styled(FormikForm)`\n  margin-top: 100px;\n  margin-left: auto;\n  margin-right: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 12px;\n  min-width: 320px;\n\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 26px;\n  color: white;\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n  margin-top: 10px;\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n  width: 100%;\n  /* height: 40px; */\n  border-radius: 12px;\n`;\n\nexport const Btn = styled.button`\n  display: inline-block;\n  padding: 10px 20px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n\n  width: 150px;\n  font-size: 18px;\n  background-color: yellow;\n  border-radius: 12px;\n`;\n"],"names":["FormSchema","Yup","shape","email","required","password","dispatch","useDispatch","useState","show","setShow","handleClick","initialValues","validationSchema","onSubmit","values","actions","console","log","logIn","resetForm","props","isErrorEmail","touched","isErrorPassword","name","field","isRequired","isInvalid","I","variant","placeholder","component","size","pr","type","width","h","icon","onClick","leftIcon","mt","colorScheme","isLoading","isSubmitting","ErrorMessage","styled","FormikErrorMessage","Form","FormikForm","Label","Field","FormikInput","Btn"],"sourceRoot":""}