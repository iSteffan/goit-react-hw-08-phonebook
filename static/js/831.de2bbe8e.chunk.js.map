{"version":3,"file":"static/js/831.de2bbe8e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/App.styled.js","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessageName = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 90px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const ErrorMessageNumber = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 184px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n  margin-top: 100px;\n  margin-left: auto;\n  margin-right: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 12px;\n  min-width: 320px;\n\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n  /* margin-top: 10px; */\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n  width: 100%;\n  /* height: 40px; */\n  border-radius: 12px;\n`;\n","import {\n  Form,\n  Field,\n  ErrorMessageName,\n  ErrorMessageNumber,\n} from './ContactForm.styled';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport {\n  Input,\n  InputGroup,\n  // InputRightElement,\n  Button,\n  FormControl,\n  FormLabel,\n  // IconButton,\n  Icon,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { BsTelephone } from 'react-icons/bs';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.number().positive('Must be > 0!').required('Required field!'),\n});\n\nexport const ContactForm = ({ onSave }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={(values, actions) => {\n        onSave({ ...values, id: nanoid() });\n        actions.resetForm();\n      }}\n    >\n      {props => {\n        const isErrorName = !props.values.name && props.touched.name;\n        const isErrorNumber = !props.values.number && props.touched.number;\n\n        return (\n          <Form>\n            <Field name=\"name\">\n              {({ field }) => (\n                <FormControl isRequired isInvalid={isErrorName} mb={3}>\n                  <FormLabel>Name</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      variant=\"flushed\"\n                      placeholder=\"Enter name\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={FiUser} color=\"grey.800\" />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessageName name=\"name\" component=\"div\" />\n            <Field name=\"number\">\n              {({ field }) => (\n                <FormControl isRequired isInvalid={isErrorNumber}>\n                  <FormLabel>Number</FormLabel>\n                  <InputGroup size=\"md\">\n                    <Input\n                      {...field}\n                      pr=\"4.5rem\"\n                      variant=\"flushed\"\n                      placeholder=\"Enter number\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={BsTelephone} color=\"grey.800\" />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessageNumber name=\"number\" component=\"div\" />\n            <Button\n              leftIcon={<AiOutlineUserAdd />}\n              mt={4}\n              colorScheme=\"blue\"\n              isLoading={props.isSubmitting}\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        );\n      }}\n      {/* <Form>\n        <Label>\n          Name\n          <br />\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Number\n          <br />\n          <Field type=\"number\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n        <Btn type=\"submit\">Add contact</Btn>\n      </Form> */}\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onSave: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  background-color: #039be5;\n  /* outline: 1px solid gray; */\n  border-radius: 12px;\n`;\n\nexport const Btn = styled.button`\n  height: 40px;\n  padding: 5px 10px;\n  background-color: yellow;\n  border-radius: 12px;\n`;\n\nexport const ContactName = styled.p`\n  color: white;\n  font-weight: 500;\n`;\n\nexport const ContactPhone = styled.p`\n  color: white;\n  font-weight: 500;\n`;\n","import {\n  List,\n  ListItem,\n  Btn,\n  ContactName,\n  ContactPhone,\n} from './ContactList.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactList = ({ contacts, onDelete }) => {\n  return (\n    <List>\n      {contacts.map(contact => {\n        return (\n          <ListItem key={contact.id}>\n            <ContactName>{contact.name}:</ContactName>\n            <ContactPhone>{contact.number}</ContactPhone>\n            <Btn type=\"button\" onClick={() => onDelete(contact.id)}>\n              Delete\n            </Btn>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  display: block;\n  margin-top: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n  width: 60%;\n  /* height: 40px; */\n  border-radius: 12px;\n  background-color: yellow;\n`;\n\nexport const Label = styled.label`\n  display: inline-block;\n\n  text-align: center;\n  width: 100%;\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { Input, Label } from './Filter.styled';\n\nexport const Filter = ({ handleInputChange, filter }) => {\n  return (\n    <Label>\n      Sort contacts by Name:\n      <br />\n      <Input\n        value={filter}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleInputChange}\n      />\n    </Label>\n  );\n};\n\nFilter.propTypes = {\n  handleInputChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  width: 400px;\n`;\n\nexport const MainTitle = styled.h1`\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 40px;\n  text-align: center;\n`;\n\nexport const TextError = styled.p`\n  text-align: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#4fa94d\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{ justifyContent: 'center' }}\n      wrapperClassName=\"loader\"\n      visible={true}\n    />\n  );\n};\n","import { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, getFilter } from 'redux/contact/filterSlice';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contact/contactsOperations';\nimport { Wrapper, MainTitle, Title, TextError } from '../components/App.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { useContact } from 'hooks';\n\nconst Contacts = () => {\n  const { contacts } = useContact();\n  const { isLoading } = useContact();\n  const { error } = useContact();\n\n  // const contacts = useSelector(selectContacts);\n  // const isLoading = useSelector(selectIsLoading);\n  // const error = useSelector(selectError);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleInputChange = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n\n  const filteredArr = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n\n  const doDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const doAddContact = newContact => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n  };\n  return (\n    <Wrapper>\n      <MainTitle>Phonebook</MainTitle>\n      <ContactForm onSave={doAddContact} />\n      <Title>Contacts</Title>\n      <Filter filter={filter} handleInputChange={handleInputChange}></Filter>\n      {isLoading && <Loader />}\n      {error && <TextError>Oops, something wrong is going on...</TextError>}\n      <ContactList\n        contacts={filteredArr()}\n        onDelete={doDeleteContact}\n      ></ContactList>\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["ErrorMessageName","styled","FormikErrorMessage","ErrorMessageNumber","Form","FormikForm","Field","FormikInput","FormSchema","Yup","shape","name","required","number","positive","ContactForm","onSave","initialValues","validationSchema","onSubmit","values","actions","id","nanoid","resetForm","props","isErrorName","touched","isErrorNumber","field","isRequired","isInvalid","mb","I","variant","placeholder","pointerEvents","as","FiUser","color","component","size","pr","BsTelephone","leftIcon","mt","colorScheme","isLoading","isSubmitting","type","List","ListItem","Btn","ContactName","ContactPhone","ContactList","contacts","onDelete","map","contact","onClick","Input","Label","Filter","handleInputChange","filter","value","pattern","title","onChange","Wrapper","MainTitle","Title","TextError","Loader","height","width","radius","ariaLabel","wrapperStyle","justifyContent","wrapperClassName","visible","useContact","error","useSelector","getFilter","dispatch","useDispatch","useEffect","fetchContacts","newContact","some","toLowerCase","alert","addContact","evt","setFilter","currentTarget","includes","deleteContact"],"sourceRoot":""}