{"version":3,"file":"static/js/149.22a1fecc.chunk.js","mappings":"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","sources":["pages/Register.styled.js","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessageName = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 90px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const ErrorMessageEmail = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 184px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const ErrorMessagePassword = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 278px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n  margin-top: 65px;\n  margin-left: auto;\n  margin-right: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 12px;\n  min-width: 320px;\n\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 26px;\n  color: white;\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n  /* margin-top: 10px; */\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n  width: 100%;\n  /* height: 40px; */\n  border-radius: 12px;\n`;\n\nexport const Btn = styled.button`\n  display: inline-block;\n  padding: 10px 20px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n\n  width: 150px;\n  font-size: 18px;\n  background-color: yellow;\n  border-radius: 12px;\n`;\n","import {\n  Form,\n  Field,\n  ErrorMessagePassword,\n  ErrorMessageEmail,\n  ErrorMessageName,\n} from './Register.styled';\nimport { register } from '../redux/auth/authOperations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\n// import { selectIsLoggedIn } from 'redux/auth/authSlice';\nimport {\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  FormControl,\n  FormLabel,\n  IconButton,\n  Icon,\n  InputLeftElement,\n} from '@chakra-ui/react'; // import { useState } from 'react';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport { TfiLock } from 'react-icons/tfi';\nimport { AiOutlineMail } from 'react-icons/ai';\nimport { useState } from 'react';\nimport { FiUser } from 'react-icons/fi';\nimport { SlPencil } from 'react-icons/sl';\nimport { useAuth } from 'hooks';\nimport { PageLoader } from 'components/RefreshLoader/RefreshLoader';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.mixed().required('Required field!'),\n  email: Yup.string().email().required('Required field!'),\n  password: Yup.string().min(7).required('Required field!'),\n});\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useAuth();\n\n  // Відображення паролю\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <>\n      {isLoading ? (\n        <PageLoader />\n      ) : (\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          validationSchema={FormSchema}\n          onSubmit={(values, actions) => {\n            dispatch(\n              register({\n                name: values.name,\n                email: values.email,\n                password: values.password,\n              })\n            );\n            actions.resetForm();\n          }}\n        >\n          {props => {\n            const isErrorName = !props.values.name && props.touched.name;\n            const isErrorEmail = !props.values.email && props.touched.email;\n            const isErrorPassword =\n              !props.values.password && props.touched.password;\n\n            return (\n              <Form>\n                <Field name=\"name\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorName} mb={3}>\n                      <FormLabel>Name</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          variant=\"flushed\"\n                          placeholder=\"Enter name\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={FiUser} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessageName name=\"name\" component=\"div\" />\n                <Field name=\"email\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorEmail} mb={3}>\n                      <FormLabel>Email</FormLabel>\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          variant=\"flushed\"\n                          placeholder=\"Enter email\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={AiOutlineMail} color=\"grey.800\" />\n                        </InputLeftElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessageEmail name=\"email\" component=\"div\" />\n                <Field name=\"password\">\n                  {({ field }) => (\n                    <FormControl isRequired isInvalid={isErrorPassword}>\n                      <FormLabel>Password</FormLabel>\n                      <InputGroup size=\"md\">\n                        <Input\n                          {...field}\n                          pr=\"4.5rem\"\n                          type={show ? 'text' : 'password'}\n                          variant=\"flushed\"\n                          placeholder=\"Enter password\"\n                        />\n                        <InputLeftElement pointerEvents=\"none\">\n                          <Icon as={TfiLock} color=\"grey.800\" />\n                        </InputLeftElement>\n                        <InputRightElement width=\"4.5rem\">\n                          {show ? (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiShow />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          ) : (\n                            <IconButton\n                              h=\"1.75rem\"\n                              size=\"lg\"\n                              variant=\"ghost\"\n                              icon={<BiHide />}\n                              onClick={handleClick}\n                            ></IconButton>\n                          )}\n                        </InputRightElement>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n                </Field>\n                <ErrorMessagePassword name=\"password\" component=\"div\" />\n                <Button\n                  leftIcon={<SlPencil />}\n                  mt={4}\n                  colorScheme=\"blue\"\n                  isLoading={props.isSubmitting}\n                  type=\"submit\"\n                >\n                  Sign up\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      )}\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["ErrorMessageName","styled","FormikErrorMessage","ErrorMessageEmail","ErrorMessagePassword","Form","FormikForm","Field","FormikInput","FormSchema","Yup","shape","name","required","email","password","min","dispatch","useDispatch","isLoading","useAuth","useState","show","setShow","handleClick","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","props","isErrorName","touched","isErrorEmail","isErrorPassword","field","isRequired","isInvalid","mb","I","variant","placeholder","pointerEvents","as","FiUser","color","component","AiOutlineMail","size","pr","type","TfiLock","width","h","icon","onClick","leftIcon","mt","colorScheme","isSubmitting"],"sourceRoot":""}