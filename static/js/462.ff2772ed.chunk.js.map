{"version":3,"file":"static/js/462.ff2772ed.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.styled.js","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikInput,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const ErrorMessageName = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 90px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const ErrorMessageNumber = styled(FormikErrorMessage)`\n  position: absolute;\n  top: 184px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n  margin-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px 40px;\n\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 12px;\n  min-width: 320px;\n\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\n\nexport const Field = styled(FormikInput)`\n  box-sizing: border-box;\n  /* margin-top: 10px; */\n  padding: 5px 20px;\n  font-size: 20px;\n  line-height: 1.5;\n  width: 100%;\n  /* height: 40px; */\n  border-radius: 12px;\n`;\n","import {\n  Form,\n  Field,\n  ErrorMessageName,\n  ErrorMessageNumber,\n} from './ContactForm.styled';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport {\n  Input,\n  InputGroup,\n  // InputRightElement,\n  Button,\n  FormControl,\n  FormLabel,\n  // IconButton,\n  Icon,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { FiUser } from 'react-icons/fi';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { BsTelephone } from 'react-icons/bs';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.string().required('Required field!'),\n});\n\nexport const ContactForm = ({ onSave }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={(values, actions) => {\n        onSave({ ...values, id: nanoid() });\n        actions.resetForm();\n      }}\n    >\n      {props => {\n        const isErrorName = !props.values.name && props.touched.name;\n        const isErrorNumber = !props.values.number && props.touched.number;\n\n        return (\n          <Form>\n            <Field name=\"name\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorName} mb={3}>\n                  <FormLabel>Name</FormLabel>\n                  <InputGroup>\n                    <Input\n                      {...field}\n                      variant=\"filled\"\n                      placeholder=\"Enter name\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={FiUser} color=\"grey.800\" />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessageName name=\"name\" component=\"div\" />\n            <Field name=\"number\">\n              {({ field }) => (\n                <FormControl isInvalid={isErrorNumber}>\n                  <FormLabel>Number</FormLabel>\n                  <InputGroup size=\"md\">\n                    <Input\n                      {...field}\n                      pr=\"4.5rem\"\n                      variant=\"filled\"\n                      placeholder=\"Enter number\"\n                      type=\"tel\"\n                    />\n                    <InputLeftElement pointerEvents=\"none\">\n                      <Icon as={BsTelephone} color=\"grey.800\" />\n                    </InputLeftElement>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n            <ErrorMessageNumber name=\"number\" component=\"div\" />\n            <Button\n              leftIcon={<AiOutlineUserAdd />}\n              mt={4}\n              colorScheme=\"blue\"\n              isLoading={props.isSubmitting}\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onSave: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  /* background-color: #039be5; */\n  outline: 1px solid gray;\n  border-radius: 12px;\n`;\n\nexport const Btn = styled.button`\n  height: 40px;\n  padding: 5px 10px;\n  /* background-color: yellow; */\n  border-radius: 12px;\n`;\n\nexport const ContactName = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  /* color: white; */\n  font-weight: 500;\n`;\n\nexport const ContactPhone = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  /* color: white; */\n  font-weight: 500;\n`;\n","import {\n  List,\n  ListItem,\n  ContactName,\n  ContactPhone,\n} from './ContactList.styled';\nimport PropTypes from 'prop-types';\nimport { FiUser } from 'react-icons/fi';\nimport { BsTelephone } from 'react-icons/bs';\nimport { ButtonGroup, IconButton } from '@chakra-ui/button';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport { GrConfigure } from 'react-icons/gr';\n\nexport const ContactList = ({ contacts, onDelete }) => {\n  return (\n    <List>\n      {contacts.map(contact => {\n        return (\n          <ListItem key={contact.id}>\n            <ContactName>\n              <FiUser />\n              {contact.name}:\n            </ContactName>\n            <ContactPhone>\n              <BsTelephone />\n              {contact.number}\n            </ContactPhone>\n            <ButtonGroup size=\"lg\" isAttached variant=\"solid\">\n              <IconButton\n                colorScheme=\"blue\"\n                aria-label=\"change contact\"\n                icon={<GrConfigure color=\"white\" />}\n              ></IconButton>\n              <IconButton\n                colorScheme=\"gray\"\n                aria-label=\"delete contact\"\n                icon={<AiOutlineDelete />}\n                onClick={() => onDelete(contact.id)}\n              />\n            </ButtonGroup>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n// import { Input, Label } from './Filter.styled';\nimport {\n  FormControl,\n  Input,\n  FormLabel,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { Icon } from '@chakra-ui/icon';\nimport { FiUser } from 'react-icons/fi';\n\nexport const Filter = ({ handleInputChange, filter }) => {\n  return (\n    <FormControl mr={'auto'} ml={'auto'} mb={3} w={'80%'}>\n      <FormLabel>Sort contacts by Name:</FormLabel>\n      <InputGroup>\n        <Input\n          width={'317px'}\n          value={filter}\n          variant=\"filled\"\n          placeholder=\"Enter name\"\n          onChange={handleInputChange}\n        />\n        <InputLeftElement pointerEvents=\"none\">\n          <Icon as={FiUser} color=\"grey.800\" />\n        </InputLeftElement>\n      </InputGroup>\n    </FormControl>\n    // <Label>\n    //   Sort contacts by Name:\n    //   <br />\n    //   <Input\n    //     value={filter}\n    //     type=\"text\"\n    //     name=\"filter\"\n    //     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //     required\n    //     onChange={handleInputChange}\n    //   />\n    // </Label>\n  );\n};\n\nFilter.propTypes = {\n  handleInputChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  width: 400px;\n`;\n\nexport const MainTitle = styled.h1`\n  margin-top: 10px;\n  text-align: center;\n  font-size: 30px;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 10px;\n\n  text-align: center;\n\n  font-size: 30px;\n`;\n\nexport const TextError = styled.p`\n  text-align: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#4fa94d\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{ justifyContent: 'center' }}\n      wrapperClassName=\"loader\"\n      visible={true}\n    />\n  );\n};\n","import { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, getFilter } from 'redux/contact/filterSlice';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contact/contactsOperations';\nimport { Wrapper, MainTitle, Title, TextError } from './Contacts.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { useContact } from 'hooks';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Contacts = () => {\n  const { contacts } = useContact();\n  const { isLoading } = useContact();\n  const { error } = useContact();\n\n  // const contacts = useSelector(selectContacts);\n  // const isLoading = useSelector(selectIsLoading);\n  // const error = useSelector(selectError);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleInputChange = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n\n  const filteredArr = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n\n  const doDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const doAddContact = newContact => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      toast.warning(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n  };\n  return (\n    <Wrapper>\n      <MainTitle>Phonebook</MainTitle>\n      <ContactForm onSave={doAddContact} />\n\n      {contacts.length !== 0 && <Title>Contacts</Title>}\n      {contacts.length > 0 && (\n        <Filter filter={filter} handleInputChange={handleInputChange}></Filter>\n      )}\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ContactList\n          contacts={filteredArr()}\n          onDelete={doDeleteContact}\n        ></ContactList>\n      )}\n      {error && <TextError>Oops, something wrong is going on...</TextError>}\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["ErrorMessageName","styled","FormikErrorMessage","ErrorMessageNumber","Form","FormikForm","Field","FormikInput","FormSchema","Yup","shape","name","required","number","ContactForm","onSave","initialValues","validationSchema","onSubmit","values","actions","id","nanoid","resetForm","props","isErrorName","touched","isErrorNumber","field","isInvalid","mb","I","variant","placeholder","pointerEvents","as","FiUser","color","component","size","pr","type","BsTelephone","leftIcon","mt","colorScheme","isLoading","isSubmitting","List","ListItem","ContactName","ContactPhone","ContactList","contacts","onDelete","map","contact","isAttached","icon","onClick","Filter","handleInputChange","filter","mr","ml","w","width","value","onChange","Wrapper","MainTitle","Title","TextError","Loader","height","radius","ariaLabel","wrapperStyle","justifyContent","wrapperClassName","visible","useContact","error","useSelector","getFilter","dispatch","useDispatch","useEffect","fetchContacts","newContact","some","toLowerCase","toast","addContact","length","evt","setFilter","currentTarget","includes","deleteContact"],"sourceRoot":""}